resname: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Allow GITHUB_TOKEN to push to repository (used by actions that push to gh-pages)
permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run ktlint
        run: ./gradlew ktlintCheck

      - name: Upload ktlint reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: |
            app/build/reports/ktlint/
            standalone/build/reports/ktlint/

  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests with coverage
        run: ./gradlew test testDevDebugUnitTest testProdDebugUnitTest jacocoTestReport

      - name: Generate coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage Check
        run: |
          ./gradlew jacocoTestCoverageVerification

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            app/build/reports/tests/
            standalone/build/reports/tests/
            app/build/test-results/
            standalone/build/test-results/
            app/build/reports/jacoco/

  build-debug:
    name: Build Debug
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug APK
        run: ./gradlew assembleDevDebug

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/dev/debug/*.apk

      - name: Prepare debug APK for publish
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          mkdir -p gh-pages-publish/dev/${{ github.sha }}
          # copy APKs if present
          cp app/build/outputs/apk/dev/debug/*.apk gh-pages-publish/dev/${{ github.sha }}/ || true

      - name: Publish debug APK to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-publish/dev/${{ github.sha }}
          destination_dir: artifacts/dev/${{ github.sha }}
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com

  build-staging:
    name: Build Staging  
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build staging APK
        run: ./gradlew assembleDevStaging

      - name: Upload staging APK
        uses: actions/upload-artifact@v4
        with:
          name: staging-apk
          path: app/build/outputs/apk/dev/staging/*.apk

      - name: Prepare staging APK for publish
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          mkdir -p gh-pages-publish/staging/${{ github.sha }}
          cp app/build/outputs/apk/dev/staging/*.apk gh-pages-publish/staging/${{ github.sha }}/ || true

      - name: Publish staging APK to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-publish/staging/${{ github.sha }}
          destination_dir: artifacts/staging/${{ github.sha }}
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com

  instrumented-tests:
    name: Instrumented Tests
    # Use ubuntu runner for faster emulator setup and better support for android-emulator-runner
    runs-on: ubuntu-latest
    # Increase overall job timeout to account for image downloads and emulator boot variability
    timeout-minutes: 90
    needs: [build-debug]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        # Limit matrix to modern/stable API levels to reduce image downloads and flakiness
        api-level: [29, 34]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd
            ~/.android/adb*
            ~/.android/avd/*
          # include runner OS and gradle cache hash to minimize collisions
          key: avd-${{ runner.os }}-api-${{ matrix.api-level }}-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            avd-${{ runner.os }}-api-${{ matrix.api-level }}-

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          # Force creation to ensure snapshot is generated consistently
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 4096 -partition-size 4096
          disable-animations: false
          # Increase boot timeout for initial snapshot generation
          emulator-boot-timeout: 1200
          script: |
            echo "Generated AVD snapshot for caching."

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          # Allow runner to use the cached snapshot; avoid forcing creation which can be slow
          force-avd-creation: false
          # Resume from snapshot when available, but disable saving at the end to keep cache stable
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 4096 -partition-size 4096
          disable-animations: true
          # Increase boot timeout to allow slow runners to finish
          emulator-boot-timeout: 1200
          script: |
            set -x
            echo "Waiting for device to be ready..."
            adb wait-for-device
            
            echo "Waiting for boot to complete..."
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
            
            echo "Waiting for package manager..."
            adb shell 'while [[ -z $(getprop init.svc.bootanim) ]]; do sleep 1; done'
            adb shell 'pm list packages' > /dev/null 2>&1 || sleep 5
            
            echo "Verifying device properties..."
            adb shell getprop ro.build.version.sdk
            adb shell getprop ro.build.version.release
            adb devices -l
            
            echo "Killing and restarting ADB server to ensure clean state..."
            adb kill-server
            adb start-server
            adb devices
            
            echo "Running connected tests..."
            ./gradlew connectedDevDebugAndroidTest --info --stacktrace

      - name: Upload instrumented test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-reports-${{ matrix.api-level }}
          path: app/build/reports/androidTests/