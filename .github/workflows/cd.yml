name: CD - Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      version-code: ${{ steps.version.outputs.version-code }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION_NAME=${GITHUB_REF#refs/tags/v}
          else
            VERSION_NAME=$(git describe --tags --abbrev=7 --dirty --always)
          fi
          
          VERSION_CODE=$(git rev-list --count HEAD)
          
          echo "version-name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version-code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Version Name: $VERSION_NAME"
          echo "Version Code: $VERSION_CODE"

      - name: Create keystore from secrets
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
          else
            echo "No keystore provided, creating debug keystore"
            keytool -genkey -v -keystore keystore.jks -keyalg RSA -keysize 2048 -validity 10000 \
              -alias debug -storepass android -keypass android \
              -dname "CN=Debug, OU=Debug, O=Debug, L=Debug, ST=Debug, C=US"
          fi

      - name: Build release AAB
        env:
          VERSION_NAME: ${{ steps.version.outputs.version-name }}
          VERSION_CODE: ${{ steps.version.outputs.version-code }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'android' }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'debug' }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'android' }}
        run: |
          ./gradlew bundleRelease \
            -PversionName="$VERSION_NAME" \
            -PversionCode="$VERSION_CODE" \
            -Pandroid.injected.signing.store.file=$(pwd)/keystore.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      - name: Build release APK
        env:
          VERSION_NAME: ${{ steps.version.outputs.version-name }}
          VERSION_CODE: ${{ steps.version.outputs.version-code }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'android' }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'debug' }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'android' }}
        run: |
          ./gradlew assembleRelease \
            -PversionName="$VERSION_NAME" \
            -PversionCode="$VERSION_CODE" \
            -Pandroid.injected.signing.store.file=$(pwd)/keystore.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      - name: Upload release AAB
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: app/build/outputs/bundle/release/*.aab

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk

      - name: Upload mapping files
        uses: actions/upload-artifact@v4
        with:
          name: mapping-files
          path: app/build/outputs/mapping/release/

  deploy-play-store:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release AAB
        uses: actions/download-artifact@v4
        with:
          name: release-aab
          path: release/

      - name: Determine track
        id: track
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TRACK="${{ github.event.inputs.release_type }}"
          elif [[ "${{ github.ref }}" == refs/tags/*-beta* ]]; then
            TRACK="beta"
          elif [[ "${{ github.ref }}" == refs/tags/*-alpha* ]]; then
            TRACK="alpha"  
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TRACK="internal"
          else
            TRACK="internal"
          fi
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "Deploying to track: $TRACK"

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        if: env.PLAY_STORE_SERVICE_ACCOUNT != ''
        env:
          PLAY_STORE_SERVICE_ACCOUNT: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}
          packageName: com.gameaday.opentactics
          releaseFiles: release/*.aab
          track: ${{ steps.track.outputs.track }}
          status: completed
          whatsNewDirectory: fastlane/metadata/android/

  create-github-release:
    name: Create GitHub Release  
    runs-on: ubuntu-latest
    needs: [build-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: release/

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version's changelog
            CHANGELOG=$(sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | sed '$d')
          else
            CHANGELOG="Release ${{ needs.build-release.outputs.version-name }}"
          fi
          
          # Save multiline changelog to output
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ needs.build-release.outputs.version-name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            release/*.apk
          draft: false
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}